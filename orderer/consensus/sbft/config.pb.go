// Code generated by protoc-gen-go. DO NOT EDIT.
// source: config.proto

package sbft // import "github.com/hyperledger/fabric/orderer/consensus/sbft"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import simplebft "github.com/hyperledger/fabric/orderer/consensus/sbft/simplebft"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ConsensusConfig struct {
	Consensus            *simplebft.Config `protobuf:"bytes,1,opt,name=consensus,proto3" json:"consensus,omitempty"`
	Peers                map[string][]byte `protobuf:"bytes,2,rep,name=peers,proto3" json:"peers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ConsensusConfig) Reset()         { *m = ConsensusConfig{} }
func (m *ConsensusConfig) String() string { return proto.CompactTextString(m) }
func (*ConsensusConfig) ProtoMessage()    {}
func (*ConsensusConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_config_5ae8de0d2b71cf85, []int{0}
}
func (m *ConsensusConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConsensusConfig.Unmarshal(m, b)
}
func (m *ConsensusConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConsensusConfig.Marshal(b, m, deterministic)
}
func (dst *ConsensusConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusConfig.Merge(dst, src)
}
func (m *ConsensusConfig) XXX_Size() int {
	return xxx_messageInfo_ConsensusConfig.Size(m)
}
func (m *ConsensusConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusConfig proto.InternalMessageInfo

func (m *ConsensusConfig) GetConsensus() *simplebft.Config {
	if m != nil {
		return m.Consensus
	}
	return nil
}

func (m *ConsensusConfig) GetPeers() map[string][]byte {
	if m != nil {
		return m.Peers
	}
	return nil
}

type JsonConfig struct {
	Consensus            *simplebft.Config `protobuf:"bytes,1,opt,name=consensus,proto3" json:"consensus,omitempty"`
	Peers                []*Peer           `protobuf:"bytes,2,rep,name=peers,proto3" json:"peers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *JsonConfig) Reset()         { *m = JsonConfig{} }
func (m *JsonConfig) String() string { return proto.CompactTextString(m) }
func (*JsonConfig) ProtoMessage()    {}
func (*JsonConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_config_5ae8de0d2b71cf85, []int{1}
}
func (m *JsonConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JsonConfig.Unmarshal(m, b)
}
func (m *JsonConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JsonConfig.Marshal(b, m, deterministic)
}
func (dst *JsonConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JsonConfig.Merge(dst, src)
}
func (m *JsonConfig) XXX_Size() int {
	return xxx_messageInfo_JsonConfig.Size(m)
}
func (m *JsonConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_JsonConfig.DiscardUnknown(m)
}

var xxx_messageInfo_JsonConfig proto.InternalMessageInfo

func (m *JsonConfig) GetConsensus() *simplebft.Config {
	if m != nil {
		return m.Consensus
	}
	return nil
}

func (m *JsonConfig) GetPeers() []*Peer {
	if m != nil {
		return m.Peers
	}
	return nil
}

type Peer struct {
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Cert                 string   `protobuf:"bytes,2,opt,name=cert,proto3" json:"cert,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Peer) Reset()         { *m = Peer{} }
func (m *Peer) String() string { return proto.CompactTextString(m) }
func (*Peer) ProtoMessage()    {}
func (*Peer) Descriptor() ([]byte, []int) {
	return fileDescriptor_config_5ae8de0d2b71cf85, []int{2}
}
func (m *Peer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Peer.Unmarshal(m, b)
}
func (m *Peer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Peer.Marshal(b, m, deterministic)
}
func (dst *Peer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Peer.Merge(dst, src)
}
func (m *Peer) XXX_Size() int {
	return xxx_messageInfo_Peer.Size(m)
}
func (m *Peer) XXX_DiscardUnknown() {
	xxx_messageInfo_Peer.DiscardUnknown(m)
}

var xxx_messageInfo_Peer proto.InternalMessageInfo

func (m *Peer) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Peer) GetCert() string {
	if m != nil {
		return m.Cert
	}
	return ""
}

func init() {
	proto.RegisterType((*ConsensusConfig)(nil), "sbft.consensus_config")
	proto.RegisterMapType((map[string][]byte)(nil), "sbft.consensus_config.PeersEntry")
	proto.RegisterType((*JsonConfig)(nil), "sbft.json_config")
	proto.RegisterType((*Peer)(nil), "sbft.peer")
}

func init() { proto.RegisterFile("config.proto", fileDescriptor_config_5ae8de0d2b71cf85) }

var fileDescriptor_config_5ae8de0d2b71cf85 = []byte{
	// 272 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0x3d, 0x4f, 0x84, 0x40,
	0x10, 0x86, 0x03, 0xc7, 0x69, 0x18, 0xae, 0x38, 0x37, 0x16, 0x78, 0x15, 0x52, 0x51, 0xed, 0x26,
	0xe7, 0x45, 0x2f, 0x96, 0x1a, 0x7b, 0x43, 0x69, 0xa3, 0x7c, 0x0c, 0x1c, 0xca, 0xb1, 0x64, 0x76,
	0x31, 0xe1, 0x8f, 0xf9, 0xfb, 0xcc, 0xc2, 0x09, 0xd1, 0xd2, 0xee, 0x9d, 0xc9, 0x33, 0xfb, 0x3e,
	0xc9, 0xc2, 0x2a, 0x93, 0x4d, 0x51, 0x95, 0xbc, 0x25, 0xa9, 0x25, 0x73, 0x54, 0x5a, 0xe8, 0xcd,
	0x95, 0xaa, 0x8e, 0x6d, 0x8d, 0x69, 0xa1, 0xc5, 0x94, 0x46, 0x20, 0xfc, 0xb2, 0x60, 0x9d, 0xc9,
	0x46, 0x61, 0xa3, 0x3a, 0xf5, 0x3a, 0xde, 0x32, 0x01, 0xee, 0xb4, 0xf3, 0xad, 0xc0, 0x8a, 0xbc,
	0xed, 0x05, 0x9f, 0x2f, 0x1f, 0x07, 0x2a, 0x9e, 0x19, 0x76, 0x07, 0xcb, 0x16, 0x91, 0x94, 0x6f,
	0x07, 0x8b, 0xc8, 0xdb, 0x5e, 0x73, 0x53, 0xcb, 0xff, 0xbe, 0xcb, 0x9f, 0x0d, 0xf3, 0xd4, 0x68,
	0xea, 0xe3, 0x91, 0xdf, 0xec, 0x01, 0xe6, 0x25, 0x5b, 0xc3, 0xe2, 0x03, 0xfb, 0xa1, 0xd1, 0x8d,
	0x4d, 0x64, 0x97, 0xb0, 0xfc, 0x4c, 0xea, 0x0e, 0x7d, 0x3b, 0xb0, 0xa2, 0x55, 0x3c, 0x0e, 0xf7,
	0xf6, 0xde, 0x0a, 0xdf, 0xc0, 0x7b, 0x57, 0xb2, 0xf9, 0xb7, 0x72, 0xf0, 0x5b, 0x19, 0x46, 0x65,
	0xb3, 0x3a, 0xb9, 0x85, 0x3b, 0x70, 0x4c, 0x60, 0x3e, 0x9c, 0x27, 0x79, 0x4e, 0xa8, 0xd4, 0xc9,
	0xec, 0x67, 0x64, 0x0c, 0x9c, 0x0c, 0x49, 0x0f, 0x72, 0x6e, 0x3c, 0xe4, 0x87, 0xdb, 0x97, 0x5d,
	0x59, 0xe9, 0x43, 0x97, 0xf2, 0x4c, 0x1e, 0xc5, 0xa1, 0x6f, 0x91, 0x6a, 0xcc, 0x4b, 0x24, 0x51,
	0x24, 0x29, 0x55, 0x99, 0x90, 0x94, 0x23, 0x21, 0x89, 0x49, 0x45, 0x98, 0xe6, 0xf4, 0x6c, 0xf8,
	0x8f, 0x9b, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2a, 0x1f, 0xde, 0xf0, 0xc0, 0x01, 0x00, 0x00,
}
